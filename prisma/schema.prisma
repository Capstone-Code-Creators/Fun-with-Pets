// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  
  firstName String @db.VarChar(255)
  lastName String @db.VarChar(255)
  username String @db.VarChar(255) @unique // no repeating usernames
  location String? @db.VarChar(255) // change location to address for more specificity 
  email String @db.VarChar(255) @unique
  profilePic String? @db.VarChar(255) // longer string for URLs
  password String @db.Text

  pets Pet[] //please double check all relations
  posts Post[]
  replies Reply[]
  events EventUsers[]
  // event Event @relation(fields: [eventUserId], references: [id])
  // eventUserId Int
}

model Pet {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  breed String? @db.VarChar(50)
  gender String
  photo String @db.VarChar(255)
  userId Int
  user User @relation(fields: [userId], references: [id])
  events Event[]
}

model Post {
  id Int @id @default(autoincrement())
  title String @db.VarChar(50)
  content String @db.Text
  likes Int @default(0)// would prefer to combine like/dislike into one boolean
  dislikes Int @default(0)// used boolean instead of BigInt as boolean is better fit
  postImg String? @db.VarChar(255)
  userId Int
  user User @relation(fields: [userId], references: [id])
  replies Reply[] 
  events Event[]
}

model Reply {
  id Int @id @default(autoincrement())
  content String @db.Text
  postId Int
  post Post @relation(fields: [postId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Event {
  id Int @id @default(autoincrement())
  title String @db.Text
  description String @db.Text
  location String @db.VarChar(255)
  pets Pet[]
  posts Post[]
  users EventUsers[]
}

model EventUsers {
  id     Int   @id @default(autoincrement())
  eventId Int
  userId Int  
  // description String? @db.Text
  // location String? @db.VarChar(255)
  event Event @relation(fields: [eventId], references:[id])
  user User @relation(fields: [userId], references:[id])
  @@unique ([eventId, userId]) 
}

